// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/pastequo/services.fizzbuzz/models"
)

// StatsHandlerFunc turns a function with the right signature into a stats handler
type StatsHandlerFunc func(StatsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn StatsHandlerFunc) Handle(params StatsParams) middleware.Responder {
	return fn(params)
}

// StatsHandler interface for that can handle valid stats params
type StatsHandler interface {
	Handle(StatsParams) middleware.Responder
}

// NewStats creates a new http.Handler for the stats operation
func NewStats(ctx *middleware.Context, handler StatsHandler) *Stats {
	return &Stats{Context: ctx, Handler: handler}
}

/* Stats swagger:route GET /algo/fizzbuzz/stats stats

get stats about the most used parameters

*/
type Stats struct {
	Context *middleware.Context
	Handler StatsHandler
}

func (o *Stats) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	Params := NewStatsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)
}

// StatsOKBody stats o k body
//
// swagger:model StatsOKBody
type StatsOKBody struct {

	// count
	// Required: true
	// Minimum: 0
	Count *int32 `json:"count"`

	// parameter
	Parameter *models.FizzbuzzParams `json:"parameter,omitempty"`
}

// Validate validates this stats o k body
func (o *StatsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParameter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StatsOKBody) validateCount(formats strfmt.Registry) error {
	if err := validate.Required("statsOK"+"."+"count", "body", o.Count); err != nil {
		return err
	}

	if err := validate.MinimumInt("statsOK"+"."+"count", "body", int64(*o.Count), 0, false); err != nil {
		return err
	}

	return nil
}

func (o *StatsOKBody) validateParameter(formats strfmt.Registry) error {
	if swag.IsZero(o.Parameter) { // not required
		return nil
	}

	if o.Parameter != nil {
		if err := o.Parameter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statsOK" + "." + "parameter")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this stats o k body based on the context it is used
func (o *StatsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateParameter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StatsOKBody) contextValidateParameter(ctx context.Context, formats strfmt.Registry) error {
	if o.Parameter != nil {
		if err := o.Parameter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statsOK" + "." + "parameter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *StatsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StatsOKBody) UnmarshalBinary(b []byte) error {
	var res StatsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
