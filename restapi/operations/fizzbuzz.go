// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FizzbuzzHandlerFunc turns a function with the right signature into a fizzbuzz handler
type FizzbuzzHandlerFunc func(FizzbuzzParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FizzbuzzHandlerFunc) Handle(params FizzbuzzParams) middleware.Responder {
	return fn(params)
}

// FizzbuzzHandler interface for that can handle valid fizzbuzz params
type FizzbuzzHandler interface {
	Handle(FizzbuzzParams) middleware.Responder
}

// NewFizzbuzz creates a new http.Handler for the fizzbuzz operation
func NewFizzbuzz(ctx *middleware.Context, handler FizzbuzzHandler) *Fizzbuzz {
	return &Fizzbuzz{Context: ctx, Handler: handler}
}

/* Fizzbuzz swagger:route POST /algo/fizzbuzz fizzbuzz

Creates a string according to the fizzbuzz algo.

*/
type Fizzbuzz struct {
	Context *middleware.Context
	Handler FizzbuzzHandler
}

func (o *Fizzbuzz) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	Params := NewFizzbuzzParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)
}
