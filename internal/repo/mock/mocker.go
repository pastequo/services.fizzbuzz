// Code generated by MockGen. DO NOT EDIT.
// Source: /home/matt/go/src/github.com/pastequo/services.fizzbuzz/internal/repo/interfaces.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entity "github.com/pastequo/services.fizzbuzz/internal/entity"
)

// MockFizzBuzzParam is a mock of FizzBuzzParam interface.
type MockFizzBuzzParam struct {
	ctrl     *gomock.Controller
	recorder *MockFizzBuzzParamMockRecorder
}

// MockFizzBuzzParamMockRecorder is the mock recorder for MockFizzBuzzParam.
type MockFizzBuzzParamMockRecorder struct {
	mock *MockFizzBuzzParam
}

// NewMockFizzBuzzParam creates a new mock instance.
func NewMockFizzBuzzParam(ctrl *gomock.Controller) *MockFizzBuzzParam {
	mock := &MockFizzBuzzParam{ctrl: ctrl}
	mock.recorder = &MockFizzBuzzParamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFizzBuzzParam) EXPECT() *MockFizzBuzzParamMockRecorder {
	return m.recorder
}

// AddFizzBuzzParam mocks base method.
func (m *MockFizzBuzzParam) AddFizzBuzzParam(ctx context.Context, param entity.FizzBuzzParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFizzBuzzParam", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFizzBuzzParam indicates an expected call of AddFizzBuzzParam.
func (mr *MockFizzBuzzParamMockRecorder) AddFizzBuzzParam(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFizzBuzzParam", reflect.TypeOf((*MockFizzBuzzParam)(nil).AddFizzBuzzParam), ctx, param)
}

// GetMaxFizzBuzzParam mocks base method.
func (m *MockFizzBuzzParam) GetMaxFizzBuzzParam(ctx context.Context) (uint, *entity.FizzBuzzParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxFizzBuzzParam", ctx)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(*entity.FizzBuzzParams)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMaxFizzBuzzParam indicates an expected call of GetMaxFizzBuzzParam.
func (mr *MockFizzBuzzParamMockRecorder) GetMaxFizzBuzzParam(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxFizzBuzzParam", reflect.TypeOf((*MockFizzBuzzParam)(nil).GetMaxFizzBuzzParam), ctx)
}
