// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/pastequo/services.fizzbuzz/models"
)

// StatsReader is a Reader for the Stats structure.
type StatsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StatsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStatsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewStatsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewStatsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStatsOK creates a StatsOK with default headers values
func NewStatsOK() *StatsOK {
	return &StatsOK{}
}

/* StatsOK describes a response with status code 200, with default header values.

Ok.
*/
type StatsOK struct {
	Payload *StatsOKBody
}

func (o *StatsOK) Error() string {
	return fmt.Sprintf("[GET /algo/fizzbuzz/stats][%d] statsOK  %+v", 200, o.Payload)
}

func (o *StatsOK) GetPayload() *StatsOKBody {
	return o.Payload
}

func (o *StatsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(StatsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStatsInternalServerError creates a StatsInternalServerError with default headers values
func NewStatsInternalServerError() *StatsInternalServerError {
	return &StatsInternalServerError{}
}

/* StatsInternalServerError describes a response with status code 500, with default header values.

Internal error.
*/
type StatsInternalServerError struct{}

func (o *StatsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /algo/fizzbuzz/stats][%d] statsInternalServerError ", 500)
}

func (o *StatsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	return nil
}

// NewStatsServiceUnavailable creates a StatsServiceUnavailable with default headers values
func NewStatsServiceUnavailable() *StatsServiceUnavailable {
	return &StatsServiceUnavailable{}
}

/* StatsServiceUnavailable describes a response with status code 503, with default header values.

Not available.
*/
type StatsServiceUnavailable struct{}

func (o *StatsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /algo/fizzbuzz/stats][%d] statsServiceUnavailable ", 503)
}

func (o *StatsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	return nil
}

/*StatsOKBody stats o k body
swagger:model StatsOKBody
*/
type StatsOKBody struct {

	// count
	// Required: true
	// Minimum: 0
	Count *int32 `json:"count"`

	// parameter
	Parameter *models.FizzbuzzParams `json:"parameter,omitempty"`
}

// Validate validates this stats o k body
func (o *StatsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParameter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StatsOKBody) validateCount(formats strfmt.Registry) error {
	if err := validate.Required("statsOK"+"."+"count", "body", o.Count); err != nil {
		return err
	}

	if err := validate.MinimumInt("statsOK"+"."+"count", "body", int64(*o.Count), 0, false); err != nil {
		return err
	}

	return nil
}

func (o *StatsOKBody) validateParameter(formats strfmt.Registry) error {
	if swag.IsZero(o.Parameter) { // not required
		return nil
	}

	if o.Parameter != nil {
		if err := o.Parameter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statsOK" + "." + "parameter")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this stats o k body based on the context it is used
func (o *StatsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateParameter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StatsOKBody) contextValidateParameter(ctx context.Context, formats strfmt.Registry) error {
	if o.Parameter != nil {
		if err := o.Parameter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statsOK" + "." + "parameter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *StatsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StatsOKBody) UnmarshalBinary(b []byte) error {
	var res StatsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
