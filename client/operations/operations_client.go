// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Fizzbuzz(params *FizzbuzzParams, opts ...ClientOption) (*FizzbuzzOK, *FizzbuzzNoContent, error)

	Healthcheck(params *HealthcheckParams, opts ...ClientOption) (*HealthcheckOK, error)

	Stats(params *StatsParams, opts ...ClientOption) (*StatsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  Fizzbuzz creates a string according to the fizzbuzz algo
*/
func (a *Client) Fizzbuzz(params *FizzbuzzParams, opts ...ClientOption) (*FizzbuzzOK, *FizzbuzzNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFizzbuzzParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "fizzbuzz",
		Method:             "POST",
		PathPattern:        "/algo/fizzbuzz",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FizzbuzzReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *FizzbuzzOK:
		return value, nil, nil
	case *FizzbuzzNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for operations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Healthcheck healthchecks route
*/
func (a *Client) Healthcheck(params *HealthcheckParams, opts ...ClientOption) (*HealthcheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHealthcheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "healthcheck",
		Method:             "GET",
		PathPattern:        "/healthcheck",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HealthcheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HealthcheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for healthcheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Stats gets stats about the most used parameters
*/
func (a *Client) Stats(params *StatsParams, opts ...ClientOption) (*StatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stats",
		Method:             "GET",
		PathPattern:        "/algo/fizzbuzz/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StatsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
